{"version":3,"file":"component---src-pages-projects-mdx-frontmatter-slug-js-content-file-path-users-michael-desktop-mogonzal-mogonzal-website-projects-me-14-octagon-me-14-octagon-mdx-c5ba2fcf5db2ad447ec3.js","mappings":"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","sources":["webpack://mogonzal-website/./projects/me14_octagon/field.png","webpack://mogonzal-website/./projects/me14_octagon/me14_octagon.mdx","webpack://mogonzal-website/./src/pages/projects/{mdx.frontmatter__slug}.js"],"sourcesContent":["export default __webpack_public_path__ + \"static/field-fdd5daea6ffd8fc8a46c76aaa8bd709a.png\";","/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nimport field from './field.png';\nimport {Prism} from '@mantine/prism';\nexport const demoCode = `import random\n\ncyls = [200, 200, 0, 100, 100, 0, 10, 10, 0]\nscores = []\n\ndef sim_octagon():\n  balls = 12\n  r_num = 0\n  score = 0\n\n  while r_num < 12 and balls > 0:\n    # Observe 5 cylinders per round.\n    observations = random.sample(cyls, 5)\n    observations.sort(reverse=True)\n\n    # Always score highest value we see for the round.\n    score += observations[0]\n    balls -= 1\n\n    # If we see two magnetic reds, score both of them.\n    if observations[1] == 200 and balls > 0:\n      score += 200\n      balls -= 1\n\n    r_num += 1\n\n  return score\n`;\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    em: \"em\"\n  }, _provideComponents(), props.components);\n  return React.createElement(React.Fragment, null, React.createElement(\"p\", {\n    className: \"font-bold text-lg sm:text-3xl\"\n  }, \" tl;dr \"), \"\\n\", React.createElement(_components.p, null, \"I designed a robot that can quickly drop scoring objects into specific areas based on color and magnetic field strength.\"), \"\\n\", React.createElement(\"br\"), \"\\n\", React.createElement(\"p\", {\n    className: \"font-bold text-lg sm:text-3xl\"\n  }, \" Overview \"), \"\\n\", React.createElement(_components.p, null, \"The second portion of Caltech's ME 14 class involved designing a robot in two weeks for a different competition each\\nyear. This time around, the competition was called the \\\"Octagon\\\" and is played with the (summarized) rules and field\\nshown below:\"), \"\\n\", React.createElement(\"br\"), \"\\n\", React.createElement(\"ul\", {\n    className: \"list-disc list-inside\"\n  }, React.createElement(\"li\", null, React.createElement(_components.p, null, \"Each team's robot holds twelve 7/16\\\" diameter steel balls to drop into the nine PVC pipe cylinders in 4 minutes.\")), React.createElement(\"li\", null, React.createElement(_components.p, null, \"The scoring value of each cylinder will change dynamically during the contest so that teams will not know in advance\\nwhich cylinders are worth 200, 100, or 10 points. Point value is determined by combining flashing LEDs and varying\\nmagnetic fields within the cylinders. Cylinders randomly change color and magnetic field strength every 20 seconds.\")), React.createElement(\"li\", null, React.createElement(_components.p, null, \"Three of the cylinders will display red LEDs at any one time, three will display green LEDs, and three will display\\nblue LEDs. Only two out of each colored LED type (red, green, or blue) will be paired with a magnetic field at a time.\")), React.createElement(\"li\", null, React.createElement(_components.p, null, \"Cylinders with a magnetic field and a red, green, or blue LED are worth 200, 100, or 10 points when scored\\nwith a ball. Cylinders with no magnetic field are worth 0 points regardless of LED color.\")), React.createElement(\"li\", null, React.createElement(_components.p, null, \"Maximum robot dimensions: 8\\\" x 10\\\" x 12\\\".\"))), \"\\n\", React.createElement(\"div\", {\n    className: \"flex justify-center\"\n  }, React.createElement(\"div\", {\n    className: \"p-4 w-full sm:w-1/2\"\n  }, React.createElement(\"img\", {\n    src: field,\n    alt: \"Octagon field setup\",\n    className: \"w-full h-auto\"\n  }))), \"\\n\", React.createElement(\"br\"), \"\\n\", React.createElement(\"p\", {\n    className: \"font-bold text-lg sm:text-3xl\"\n  }, \" Approach \"), \"\\n\", React.createElement(_components.p, null, \"While other teams designed robots that would lift or launch the scoring balls into a desired cylinder, we opted for a\\ndesign that drops balls from the top of our robot into each of the 6\\\" tall cylinders via driving directly over them.\\nThis seemed like a much more efficient solution, especially given that we wouldn't need to drive up to each cylinder,\\ndock, and reverse out like other robots. In terms of subsystems, this would require an adequately fast drivertrain, a\\nball dispensing mechanism, and a sensing area with a magnetometer and LED sensor.\"), \"\\n\", React.createElement(\"br\"), \"\\n\", React.createElement(_components.p, null, \"In terms of strategy, note that each match consists of twelve 20-second scoring periods before LEDs and field strengths\\nchange. Since the field is relatively small, we estimated that we can visit at least 5 goals per period. With some\\ncombinatorics, we find that even in the worst-case scenario we are able to reach at least one magnetic green cylinder.\\nThis means we can afford to skip every blue cylinder we find. Additionally, we find that only ~16% of scoring period\\nresult in us  \", React.createElement(_components.em, null, \"not\"), \" seeing a magnetic red cylinder. Assuming we deposit exactly one ball during each scoring period, we\\nfind an expected match score of 200(1-0.16) + 100(0.16) = 2208.\"), \"\\n\", React.createElement(\"br\"), \"\\n\", React.createElement(_components.p, null, \"Given the above analysis, we agreed that the optimal strategy was to drop a ball into any magnetic red cylinder, or if\\nnone are found in a given scoring period, drop a ball into a magnetic green cylinder. We can simulate the strategy with\\nsome simple Python code:\"), \"\\n\", React.createElement(\"div\", {\n    className: \"flex justify-center\"\n  }, React.createElement(\"div\", {\n    className: \"p-4 w-full sm:w-fit\"\n  }, React.createElement(Prism, {\n    language: \"python\"\n  }, demoCode))), \"\\n\", React.createElement(_components.p, null, \"Running this simulation many times over yields an average score of about 2230. It makes sense that this is slightly\\nabove our expectation given that we admit the possibility of scoring in two red cylinders per roudn. With our approach\\nnow fully validated, we moved on to the actual design. Because this was mostly a design and strategy competition, we did\\nnot focus too much of our two weeks on mechanical rigor, but the general decision-making process for each subsystem's\\ndesign is shown in our preliminary design review (PDR). The completed CAD is shown in the critical design review (CDR).\"), \"\\n\", React.createElement(\"br\"), \"\\n\", React.createElement(\"p\", {\n    className: \"font-bold text-lg sm:text-3xl\"\n  }, \" PDR and CDR Slides \"), \"\\n\", React.createElement(\"div\", {\n    className: \"width-full\",\n    style: {\n      position: 'relative',\n      overflow: 'hidden',\n      width: '100%',\n      paddingTop: '56.25%'\n    }\n  }, React.createElement(\"iframe\", {\n    src: \"https://docs.google.com/presentation/d/1QiC1WHZUFn-SxiDRntAOKqtV4YUnFdJVvt9AV6vgCPQ/embed?start=false&loop=false&delayms=3000\",\n    style: {\n      position: 'absolute',\n      top: 0,\n      left: 0,\n      width: '100%',\n      height: '100%'\n    }\n  })), \"\\n\", React.createElement(\"br\"), \"\\n\", React.createElement(\"div\", {\n    className: \"width-full\",\n    style: {\n      position: 'relative',\n      overflow: 'hidden',\n      width: '100%',\n      paddingTop: '56.25%'\n    }\n  }, React.createElement(\"iframe\", {\n    src: \"https://docs.google.com/presentation/d/1K4OYr9lM27yh5VCrK5OYeSEdiIuSrf3zrqL5B5ilgSE/embed?start=false&loop=false&delayms=3000\",\n    style: {\n      position: 'absolute',\n      top: 0,\n      left: 0,\n      width: '100%',\n      height: '100%'\n    }\n  })));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import GATSBY_COMPILED_MDX from \"/Users/michael/Desktop/mogonzal/mogonzal-website/projects/me14_octagon/me14_octagon.mdx\";\nimport * as React from 'react';\nimport {graphql} from 'gatsby';\nimport Layout from '../../components/layout';\nconst ProjectPost = ({data, children}) => {\n  return React.createElement(Layout, {\n    pageTitle: data.mdx.frontmatter.title,\n    date: data.mdx.frontmatter.date\n  }, React.createElement(\"div\", {\n    className: \"w-full sm:w-2/3\"\n  }, children));\n};\nexport const query = graphql`\n  query ($id: String) {\n    mdx(id: { eq: $id }) {\n      frontmatter {\n        title\n        date(formatString: \"MMMM D, YYYY\")\n        thumbnail {\n          childImageSharp {\n            gatsbyImageData\n          }\n        }\n        thumbnail_alt\n      }\n    }\n  }`;\nexport const Head = ({data}) => React.createElement(\"title\", null, data.mdx.frontmatter.title);\nProjectPost\nexport default function GatsbyMDXWrapper(props) {\n  return React.createElement(ProjectPost, props, React.createElement(GATSBY_COMPILED_MDX, props));\n}\n"],"names":["_createMdxContent","props","_components","Object","assign","p","em","_provideComponents","components","React","className","src","field","alt","Prism","language","style","position","overflow","width","paddingTop","top","left","height","wrapper","MDXLayout","ProjectPost","_ref","data","children","Layout","pageTitle","mdx","frontmatter","title","date","Head","_ref2","GatsbyMDXWrapper","GATSBY_COMPILED_MDX"],"sourceRoot":""}