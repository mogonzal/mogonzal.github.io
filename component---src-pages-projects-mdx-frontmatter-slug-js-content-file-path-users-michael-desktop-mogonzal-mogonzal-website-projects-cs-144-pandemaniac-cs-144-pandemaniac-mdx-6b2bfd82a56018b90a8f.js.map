{"version":3,"file":"component---src-pages-projects-mdx-frontmatter-slug-js-content-file-path-users-michael-desktop-mogonzal-mogonzal-website-projects-cs-144-pandemaniac-cs-144-pandemaniac-mdx-6b2bfd82a56018b90a8f.js","mappings":"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","sources":["webpack://mogonzal-website/./projects/cs144_pandemaniac/cs144_pandemaniac.mdx","webpack://mogonzal-website/./src/pages/projects/{mdx.frontmatter__slug}.js","webpack://mogonzal-website/./src/components/latex.js","webpack://mogonzal-website/./node_modules/react-katex/dist/react-katex.js"],"sourcesContent":["/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nimport {Prism} from '@mantine/prism';\nimport Latex from '/src/components/latex';\nexport const originalSimCode = `def original_sim(G, seeds1, seeds2):\n  # Initialize the graph with the given seeds.\n  for node in seeds1:\n    G[node].color = color1\n\n  for node in seeds2:\n    if G[node].color == blank:\n      G[node].color = color2\n    else:\n      G[node].color = blank\n\n  # Run until convergence or manual stop.\n  max_iter = random_int(100, 200)\n  iter = 0\n  new_G = None\n\n  while G != new_G and iter < max_iter:\n    new_G = G.copy()\n    for node in G:\n      totals = [0, 0]\n      for neighbor in node.neighbors:\n        if neighbor.color != blank:\n          totals[neighbor.color] += 1\n        \n      if node.color != blank:\n        totals[node.color] += 1.5\n\n      if totals[color1] > node.nonblank_neighbors:\n        new_G[node].color = color1\n      elif totals[color2] > node.nonblank_neighbors:\n        new_G[node].color = color2\n\n    G = new_G\n    iter += 1\n\n  # Count up colors.\n  totals = [0, 0]\n  for node in G:\n    if node.color != blank:\n      totals[node] += 1\n\n  return totals\n`;\nexport const updatedSimCode = `def better_sim(G, seeds1, seeds2):\n  # Initialize the graph with the given seeds.\n  for node in seeds1:\n    G[node].color = color1\n\n  for node in seeds2:\n    if G[node].color == blank:\n      G[node].color = color2\n    else:\n      G[node].color = blank\n\n  # Figure out which nodes we actually need to check (neighbors of colored nodes).\n  to_check = set()\n\n  for node in set_diff(seeds1, seeds2):\n    for neighbor in node.neighbors:\n      to_check.add(neighbor)\n\n  # Run until convergence or manual stop.\n  max_iter = random_int(100, 200)\n  iters = 0\n\n  while iters < max_iter:\n    to_update = set()\n\n    for node in to_check:\n      for color in colors:\n        if node.color == blank and node.counts[color] > node.nonblank_neighbors:\n          for neighbor in node.neighbors:\n            neighbor.new_nonblank_neighbors += 1\n            neighbor.new_counts[color] += 1\n            to_update.add(neighbor)\n            to_check.add(neighbor)\n          node.color = color\n        elif node.color != color and node.counts[color] > node.nonblank_neighbors + 1.5:\n          for neighbor in node.neighbors:\n            neighbor.new_counts[node.color] -= 1\n            neighbor.new_counts[color] += 1\n            to_update.add(neighbor)\n            to_check.add(neighbor)\n          node.color = color\n\n    if to_update.is_empty():\n      break\n\n    for node in to_update:\n      node.nonblank_neighbors = node.new_nonblank_neighbors\n      node.counts = node.new_counts\n\n    iters += 1\n\n  # Count up colors.\n  totals = [0, 0]\n  for node in G:\n    if node.color != blank:\n      totals[node] += 1\n\n  return totals, iters\n`;\nexport const linalgSimCode = `import numpy as np\n\ndef best_sim(G, n1, n2):  \n  if seed1 == seed2:\n    return 0.0, 0.0\n\n  # Construct initial seeding for each color.\n  n = A.shape[G.order()]\n  A = G.adjacency_matrix() + np.identity(n)\n  curr = np.zeros(n).reshape((-1,1))\n  curr[list(seed1)] += 1\n  curr[list(seed2)] -= 1\n\n  # Simulate until convergence or max iterations reached\n  max_iter = max_rounds = np.random.randint(100, 200)\n  iter = 0\n  prev = None\n\n  while (prev != curr).any() and iter < max_iter:\n    prev = curr\n    curr = np.sign(A @ prev)\n    iter += 1\n\n  curr = np.array(curr).flatten()\n  counts = collections.Counter(curr)\n  return counts[1], counts[-1]\n`;\nexport const codeV0 = `from datetime import datetime\nimport random\n\ndef v0(G, k):\n  # Start with highest degree nodes.\n  t = datetime.now()\n  deg_seeds = sorted(G.nodes, key=G.degree, reverse=True)[:k]\n  scores = dict()\n\n  # Spend the entire time searching for seeds beating degree.\n  while (datetime.now() - t).total_seconds() < 240:\n    seeds = random.choice(G.nodes, k)\n\n    [n_us, n_deg] = original_sim(G, seeds, deg_seeds)\n\n    if n_us > n_deg:\n      scores[seeds] = n_us\n\n  # Pick set that performed best against degree (if found).\n  if len(scores) == 0:\n    return deg_seeds\n  return sorted(scores, key=scores.get)[-1]\n`;\nexport const codeV02 = `from datetime import datetime\nimport random\n\ndef better_v0(G, k):\n  # Start with highest degree nodes.\n  t = datetime.now()\n  deg_seeds = sorted(G.nodes, key=G.degree, reverse=True)[:k]\n  scores = dict()\n\n  # Spend the entire time searching for seeds beating degree.\n  while (datetime.now() - t).total_seconds() < 240:\n    seeds = random.choice(G.nodes, k)\n\n    [n_us, n_deg], iters = better_sim(G, seeds, deg_seeds)\n\n    if n_us > n_deg:\n      scores[seeds] = n_us / iters\n\n  # Pick set that performed best against degree (if found).\n  if len(scores) == 0:\n    return deg_seeds\n  return sorted(scores, key=scores.get)[-1]\n`;\nexport const codeV1 = `from datetime import datetime\nimport itertools\nimport random\n\ndef v1(G, k):\n  # Store highest degree nodes as well as top 25% of nodes by degree.\n  t = datetime.now()\n  deg_seeds = sorted(G.nodes, key=G.degree, reverse=True)[:k]\n  sample_nodes = sorted(G.nodes, key=G.degree, reverse=True)[k:G.degree // 4]\n\n  # Search for sets of seeds beating degree centrality.\n  tested = set()\n  scores = dict()\n\n  while (datetime.now() - t).total_seconds() < 240:\n    n_outside = random.randint(0, k//2)\n    nodes_outside = random.sample(sample_nodes, n_outside)\n    nodes_inside = random.sample(deg_seeds, k - n_outside)\n    seeds = union(nodes_outside, nodes_inside)\n\n    if seeds not in tested:\n      [score_us, score_deg] = best_sim(G, seeds, deg_seeds)\n      if n_us > n_deg:\n        scores[seeds] = score_us\n      tested.add(seeds)\n\n  if len(scores) == 0:\n    return deg_seeds\n\n  # Pit the top 100 combinations against each other.\n  top_seeds = sorted(scores, key=scores.get, reverse=True)[:100]\n  final_scores = {seed : 0 for seed in top_seeds}\n\n  for s1, s2 in itertools.combinations(top_seeds, 2):\n    s1_score, s2_score = best_sim(A, s1, s2)\n\n    if s1_score > s2_score:\n        final_scores[s1] += 1\n    if s1_score < s2_score:\n        final_scores[s2] += 1\n\n  return max(final_scores, key=final_scores.get)\n`;\nexport const codeV2 = `from datetime import datetime\nimport random\n\ndef v2(G, k):\n  # Store highest degree nodes as well as top 25% of nodes by degree.\n  t = datetime.now()\n  deg_seeds = sorted(G.nodes, key=G.degree, reverse=True)[:k]\n  sample_nodes = sorted(G.nodes, key=G.degree, reverse=True)[k:G.degree // 4]\n\n  # Iterate through seeds by permuting individual nodes.\n  tested = set()\n  scores = dict()\n  curr = deg_seeds\n\n  while (datetime.now() - t).total_seconds() < 240:\n    tested_here = set()\n\n    for idx_to_remove in range(len(curr)):\n      for node in sample_nodes:\n        new_seed = curr\n        new_seed[idx_to-remove] = node\n\n        if new_seed not in tested:\n          [score_us, score_deg] = best_sim(G, seeds, deg_seeds)\n          if n_us > n_deg:\n            scores[seeds] = score_us\n          tested.add(seeds)\n          tested_here.add(seeds)\n\n    curr = max(tested_here, key=scores.get)\n  \n  # Pit the top 100 combinations against each other.\n  top_seeds = sorted(scores, key=scores.get, reverse=True)[:100]\n  final_scores = {seed : 0 for seed in top_seeds}\n\n  for s1, s2 in itertools.combinations(top_seeds, 2):\n    s1_score, s2_score = best_sim(A, s1, s2)\n\n    if s1_score > s2_score:\n        final_scores[s1] += 1\n    if s1_score < s2_score:\n        final_scores[s2] += 1\n\n  return max(final_scores, key=final_scores.get)\n`;\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    strong: \"strong\",\n    em: \"em\"\n  }, _provideComponents(), props.components);\n  return React.createElement(React.Fragment, null, React.createElement(\"p\", {\n    className: \"font-bold text-lg sm:text-3xl\"\n  }, \" tl;dr \"), \"\\n\", React.createElement(_components.p, null, \"I designed an efficient algorithm for time-constrained seed selection in competing cascade graphs.\"), \"\\n\", React.createElement(\"br\"), \"\\n\", React.createElement(\"p\", {\n    className: \"font-bold text-lg sm:text-3xl\"\n  }, \" Overview \"), \"\\n\", React.createElement(_components.p, null, \"As part of another yearly Caltech tradition, students in CS 144 are exposed to an emerging hot topic in\\nnetworks—competing cascades. A competing cascade on graph \", React.createElement(Latex, {\n    displayMode: \"inline\",\n    formula: \"G = (V,E)\"\n  }), \" is defined as follows:\"), \"\\n\", React.createElement(\"br\"), \"\\n\", React.createElement(\"ul\", {\n    className: \"list-disc list-inside\"\n  }, React.createElement(\"li\", null, React.createElement(_components.p, null, React.createElement(_components.strong, null, \"Initialization\"), \": each node in \", React.createElement(Latex, {\n    displayMode: \"inline\",\n    formula: \"G\"\n  }), \" begins uncolored.\")), React.createElement(\"li\", null, React.createElement(_components.p, null, React.createElement(_components.strong, null, \"Seeding\"), \": each team selects \", React.createElement(Latex, {\n    displayMode: \"inline\",\n    formula: \"k\"\n  }), \" seed nodes to start with their respective color. If two teams attempt to seed the\\nsame node, it begins blank. With the colored seeds set, we now begin rounds of spreading.\")), React.createElement(\"li\", null, React.createElement(_components.p, null, React.createElement(_components.strong, null, \"During each round\"), \": each node \", React.createElement(Latex, {\n    displayMode: \"inline\",\n    formula: \"n \\\\in G\"\n  }), \" looks at its non-blank neighbors and totals the number of each color. If\\nany color's total obtains a strict majority (over half) of the total sum, \", React.createElement(Latex, {\n    displayMode: \"inline\",\n    formula: \"n\"\n  }), \" takes on that color at the end\\nof the round. Note that if \", React.createElement(Latex, {\n    displayMode: \"inline\",\n    formula: \"n\"\n  }), \" already has a color, it also \\\"votes\\\" for its own color with weight 1.5.\")), React.createElement(\"li\", null, React.createElement(_components.p, null, React.createElement(_components.strong, null, \"Termination\"), \": rounds continue until convergence, meaning no nodes change color during a round. Note that there is a small chance\\ncolors oscillate infinitely; if this occurs then we choose a random number of rounds \", React.createElement(Latex, {\n    displayMode: \"inline\",\n    formula: \"\\\\in [100, 200]\"\n  }), \" to stop.\")), React.createElement(\"li\", null, React.createElement(_components.p, null, React.createElement(_components.strong, null, \"Scoring\"), \": after convergence or a manual stop, the team with the most nodes of their respective color wins. If\\nboth teams happened to select the exact same \", React.createElement(Latex, {\n    displayMode: \"inline\",\n    formula: \"k\"\n  }), \" seed nodes, both are awarded a loss.\"))), \"\\n\", React.createElement(\"br\"), \"\\n\", React.createElement(_components.p, null, \"Note that the definition above admits cascades with an unlimited number of teams, but here we focus mostly on two-team\\ncascades. Using the above cascade mechanics, the Pandemaniac challenge is run according to the following procedure:\"), \"\\n\", React.createElement(\"br\"), \"\\n\", React.createElement(\"ul\", {\n    className: \"list-disc list-inside\"\n  }, React.createElement(\"li\", null, React.createElement(_components.p, null, \"Teams are given access to graphs on the course website, where each file stores the graph in adjacency list format as\\nwell as the number of seed nodes \", React.createElement(_components.em, null, \"k\"), \" to select.\")), React.createElement(\"li\", null, React.createElement(_components.p, null, \"From the moment a team downloads a graph file, they have a maximum of 5 minutes to submit a text file containing\\ntheir desired seed nodes.\")), React.createElement(\"li\", null, React.createElement(_components.p, null, \"Each day of the challenge, a few graphs are released and each team's seeds are pitted round-robin style against all\\nother teams. Team with the best overall records would then face off elimination style until a winner was crowned.\"))), \"\\n\", React.createElement(\"br\"), \"\\n\", React.createElement(_components.p, null, \"Pandemaniac is clearly a complicated game and the development of a winning strategy will involve some combination of\\ngraph theory as well as game theory. Do we opt to choose simply the highest-degree nodes in the graph, or perhaps use\\nsome other measure of centrality? Do we prioritize nodes that the other team is unlikely to seed in order to avoid\\npicking the same ones? The answers to these questions will become apparent as we explore tools and strategies below.\"), \"\\n\", React.createElement(\"br\"), \"\\n\", React.createElement(\"p\", {\n    className: \"font-bold text-lg sm:text-3xl\"\n  }, \" Tools \"), \"\\n\", React.createElement(_components.p, null, \"The simulation code provided with the sample project files was adequate for simple testing, but we knew from the start\\nthat our strategy would likely involve many successive simulations. Thus, we sought to improve the simulation code to\\nbe more efficient. For reference, the original simulation roughly followed the pseucode below:\"), \"\\n\", React.createElement(\"div\", {\n    className: \"flex justify-center\"\n  }, React.createElement(\"div\", {\n    className: \"p-4 w-full sm:w-fit\"\n  }, React.createElement(Prism, {\n    language: \"python\"\n  }, originalSimCode))), \"\\n\", React.createElement(_components.p, null, \"The first improvement simply optimized the original code to avoid unnecessary neighbor checks. For the original\\nsimulator, each round requires looking through every node in the graph as well as every neighbor at a given node. This\\nincludes nodes that have no colored neighbors and have no reason to be checked in the first place. The improvement we\\nmade was to look only at nodes that we'd previously marked as “needing updating.” When a node updates its color, it\\nupdates the votes for its color for each of its neighbors and marks the neighbor as needing updating. Thus, we only look\\nthrough the necessary nodes at each iteration. In testing, this produced about a 30% time save and allowed us to start\\npursuing brute force strategies with higher success.\"), \"\\n\", React.createElement(\"div\", {\n    className: \"flex justify-center\"\n  }, React.createElement(\"div\", {\n    className: \"p-4 w-full sm:w-fit\"\n  }, React.createElement(Prism, {\n    language: \"python\"\n  }, updatedSimCode))), \"\\n\", React.createElement(_components.p, null, \"The second improvement was essentially a complete redesign of the simulation that foregoes traversing a graph\\naltogether. Instead, it takes advantage of sparese matrix multiplication, which is much quicker. For a game with two\\ncolors, we can accomplish this by creating vector \", React.createElement(Latex, {\n    displayMode: \"inline\",\n    formula: \"b\"\n  }), \" and matrix \", React.createElement(Latex, {\n    displayMode: \"inline\",\n    formula: \"A\"\n  }), \" with the following setup:\"), \"\\n\", React.createElement(Latex, {\n    displayMode: \"block\",\n    formula: \"\\nb_i =\\n\\\\begin{cases}\\n1, & \\\\text{if node } i \\\\text{ is color 1} \\\\\\\\\\n-1, & \\\\text{if node } i \\\\text{ is color 2}\\n\\\\end{cases},~~~~\\nA_{ij} =\\n\\\\begin{cases}\\n1, & \\\\text{if node } i \\\\text{ shares an edge with node } j \\\\\\\\\\n1.5, & \\\\text{if } i = j \\\\\\\\\\n0, & \\\\text{otherwise}\\n\\\\end{cases}\\n\"\n  }), \"\\n\", React.createElement(_components.p, null, \"Note that \", React.createElement(Latex, {\n    displayMode: \"inline\",\n    formula: \"A\"\n  }), \" is exactly the adjacency matrix with a superimposed diagonal of value 1.5. What the above setup\\naccomplishes is the ability to represent a given round of the cascade as \", React.createElement(Latex, {\n    displayMode: \"inline\",\n    formula: \"\\\\text{sign}(bA)\"\n  }), \". If this is unclear, perhaps take some time to convince yourself that this is true. But we\\nnow had a way to rapidly simulate cascade games using just a few lines of linear algebra.\"), \"\\n\", React.createElement(\"div\", {\n    className: \"flex justify-center\"\n  }, React.createElement(\"div\", {\n    className: \"p-4 w-full sm:w-fit\"\n  }, React.createElement(Prism, {\n    language: \"python\"\n  }, linalgSimCode))), \"\\n\", React.createElement(_components.p, null, \"After implementing most of our strategies using Python and heavily leveraging NumPy, we decided to try making it faster.\\nThe first thing we tried was PyTorch, which is a GPU-enabled ML library. The syntax and functionality is very similar to\\nNumPy. After implementing the changes, at least on our MacBooks (which was primarily what we had access to), there was a\\nmarginal improvement over NumPy. We then tried CuPy, which is a numpy version that leverages CUDA for improvements, but\\nour windows desktops were not able to run CuPy due to some CUDA issues, and it was not supported on Apple silicon for\\nobvious reasons. Afterwards, we stumbled across a special version of NumPy that is optimized for Apple silicon, and\\nimmediately saw an average of over a 5x increase in processing speed over base NumPy, and a 2x improvement over the\\nPyTorch implementation. This is ultimately what we went for. Using these improvements, we were able to increase\\nprocessing for our final strategy from ~100-150k iterations to over 1 million.\"), \"\\n\", React.createElement(\"br\"), \"\\n\", React.createElement(\"p\", {\n    className: \"font-bold text-lg sm:text-3xl\"\n  }, \" Potential Strategies \"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.strong, null, \"Weighted\"), \": the first potential strategy was created by doing some testing with the provided simulation. We saw that\\nthe winning strategies usually had mostly high-centrality nodes, so we decided to develop around it. In graph analysis,\\nthe three main centrality measurements are \", React.createElement(_components.em, null, \"degree\"), \", \", React.createElement(_components.em, null, \"betweenness\"), \", and \", React.createElement(_components.em, null, \"closeness\"), \" centrality and are defined for node\\n\", React.createElement(Latex, {\n    displayMode: \"inline\",\n    formula: \"v\"\n  }), \" as follows:\"), \"\\n\", React.createElement(Latex, {\n    displayMode: \"block\",\n    formula: \"\\n\\\\begin{aligned}\\n\\\\text{Degree Centrality: } & C_D(v) = \\\\frac{deg(v)}{n-1} \\\\\\\\\\n\\\\text{Betweenness Centrality: } & C_B(v) = \\\\sum_{s\\\\neq v\\\\neq t}\\\\frac{\\\\sigma_{s,t}(v)}{\\\\sigma_{s,t}} \\\\\\\\\\n\\\\text{Closeness Centrality: } & C_C(v) = \\\\frac{1}{\\\\sum_{u\\\\in V} d(v,u)}\\n\\\\end{aligned}\\n\"\n  }), \"\\n\", React.createElement(_components.p, null, \"Nodes of high centrality are very useful because they are more likely to spread their color faster because of how\\nconnected they are to the rest of the graph. For this strategy we took each of the above centralities and applyied a\\nweight to each, choosing the nodes with the highest rank after weighting. We then iterated over all discrete\\ncombinations of centrality weights, and pitted each combination against each other. Ultimately, we took the strategy\\nthat won the most from this.\"), \"\\n\", React.createElement(\"br\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.strong, null, \"Genetic\"), \": Given that Pandemaniac is a kind of game, we took inspiration from genetic algorithms developed to find how\\nto play video games in an unsupervised way. To do this, we started with a population of size \", React.createElement(Latex, {\n    displayMode: \"inline\",\n    formula: \"n\"\n  }), \" seedings that contained random strategies made by randomly selecting nodes from the graph. We then\\ncalculated the “fitness” of each strategy, which basically consisted of pitting each strategy in the population against\\neach other. The resulting fitness is a measure of how many games that seeding won. We then take the top 2 strategies as\\n“parents” to generate “offspring” by generating \", React.createElement(Latex, {\n    displayMode: \"inline\",\n    formula: \"n-2\"\n  }), \" new seedings by randomly\\nchoosing \", React.createElement(Latex, {\n    displayMode: \"inline\",\n    formula: \"k\"\n  }), \" seeds from the set of seeds from both parents in the “crossover”\\nstep. Finally, we had a “mutation” step, where a small subset of nodes from each offspring was randomly switched out\\nwith some other node in the graph. This process repeated until the parent seeds did not change for 5 iterations, after\\nwhich point we pit the final population against each other and took the winning-est seeding.\"), \"\\n\", React.createElement(\"br\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.strong, null, \"Clustering\"), \": This strategy was less of an individual strategy and moreso a focusing of the above weighting strategy.\\nThe goal was to reduce the problem scope, specifically by using k-means to find the largest cluster, and making use of\\nthe weighted strategy to choose the best seed nodes within this cluster. The thinking was that if parts of the graph\\nwere under contention, we’d be best off having a stronghold within the largest cluster. In testing this typically lost\\nto a more generalized weighted strategy, or even simply the highest degree centrality nodes.\"), \"\\n\", React.createElement(\"br\"), \"\\n\", React.createElement(_components.p, null, \"After extensive testing with the above 3 strategies, we pit the results together to get the overall winning-est\\nstrategy. This usually ended up being from the first vein of strategies, specifically one in which degree centrality was\\nweighted very highly. We used this empirical observation when developing our final strategy described below, which\\n(surprisingly) has very little in common with the above three as it takes on more of a brute-force approach.\"), \"\\n\", React.createElement(\"br\"), \"\\n\", React.createElement(\"p\", {\n    className: \"font-bold text-lg sm:text-3xl\"\n  }, \" Developing a Final Strategy \"), \"\\n\", React.createElement(_components.p, null, \"Our final strategy has very little in common with the ones explored above and takes more of a brute-force approach. We\\ndeveloped it in three different stages, which we describe below with some associated pseudocode. Note that our actual\\nimplementations used Python's multiprocessing module to squeeze as much effort as possible out of the CPU within five\\nminutes:\"), \"\\n\", React.createElement(\"br\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.strong, null, \"V0. Random brute force\"), \": This was our first foray into the black box we would eventually develop. The motivation\\nbehind attempting this strategy to begin with is quite simple: despite our best efforts analytically, we could rarely\\nfind seed nodes which outright beat degree centrality. Given how random it seemed, we thought it would be amusing to\\ngenerate random seed nodes for 4 minutes and see if any beat degree centrality. To our surprise, this not only produced\\nbetter results but also produced more results within the entire five-minute timespan. Thus, we elected to compete with\\nthis for the first few days while we looked into optimizations.\"), \"\\n\", React.createElement(\"div\", {\n    className: \"flex justify-center\"\n  }, React.createElement(\"div\", {\n    className: \"p-4 w-full sm:w-fit\"\n  }, React.createElement(Prism, {\n    language: \"python\"\n  }, codeV0))), \"\\n\", React.createElement(_components.p, null, \"Given that our first improvement did not include any sort of analytical consideration and was based off of quick\\nsimulations, we decided to double down on the strategy and looked into improvements that simulate even faster. So we\\nimproved our sim to make use of matrix multiplication approach described in the tools above and changed our performance\\nmetric to frontier expansion rate as opposed to nodes captured total. What this meant was that we measured how fast the\\nseeds accumulated nodes by dividing the number of nodes accumulated over the number of iterations it took to converge.\\nThis disincentivized non-convergent or slow-growing seeds. This was met with much better success than V0, but we still\\nhad not cracked the top few teams.\"), \"\\n\", React.createElement(\"div\", {\n    className: \"flex justify-center\"\n  }, React.createElement(\"div\", {\n    className: \"p-4 w-full sm:w-fit\"\n  }, React.createElement(Prism, {\n    language: \"python\"\n  }, codeV02))), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.strong, null, \"V1. Directed brute force\"), \": This is when the strategy really began to get smarter. Having invested significant time\\ninto optimizing the simulation process, we instead shifted our focus on reducing the problem space itself. From\\nempirical observation of results for the past few days, it appeared that most winning seeds consisted of some\\ncombination of high-degree nodes, and a few (usually 1-3) slightly lower degree nodes. Knowing this, we developed a new\\napproach that looked through seeds in a more efficient order (therefore increasing our odds of finding a good one within\\nfive minutes). We accomplished this by first sorting nodes by degree centrality and then did the following at each\\niteration: we chose a random number \", React.createElement(Latex, {\n    displayMode: \"inline\",\n    formula: \"m \\\\in [0, k/2]\"\n  }), \". We then chose \", React.createElement(Latex, {\n    displayMode: \"inline\",\n    formula: \"k-m\"\n  }), \" seed nodes from the top \", React.createElement(Latex, {\n    displayMode: \"inline\",\n    formula: \"k\"\n  }), \" nodes as well as\\n\", React.createElement(Latex, {\n    displayMode: \"inline\",\n    formula: \"m\"\n  }), \" seed nodes from the remaining top 25% of nodes. This produced many more\\nhigh-performing seeds, further strengthening our final result because we had enough seeds to do a final layer of testing\\nbefore picking which one to submit. The final step consisted of filtering out the top 100 seeds from the above process,\\npitting them all against each other, and submitting the one with the highest average win rate. As expected, this was met\\nwith even more success during round robin matches, advancing us to the final round of the tournament!\"), \"\\n\", React.createElement(\"div\", {\n    className: \"flex justify-center\"\n  }, React.createElement(\"div\", {\n    className: \"p-4 w-full sm:w-fit\"\n  }, React.createElement(Prism, {\n    language: \"python\"\n  }, codeV1))), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.strong, null, \"V2. Greedy top-down search\"), \": As a final improvement, we decided to make the strategy get greedy in an effort to\\nfurther improve the pool of high-performing seed nodes we iterate through. We begin with the highest degree nodes as our\\nbaseline strategy and the current strategy. We then launch \", React.createElement(Latex, {\n    displayMode: \"inline\",\n    formula: \"k\"\n  }), \" (number of seeds)\\nprocesses, where the \", React.createElement(Latex, {\n    displayMode: \"inline\",\n    formula: \"i\"\n  }), \"th process is responsible for considering what would\\nhappen if we replace the ith node of the current seed set with something new, confirming that seed hasn’t been tested\\nyet, and testing it against the baseline. If it beats the baseline, we add the strategy to a winning dictionary that\\nkeeps track of how much these strategies won by. After all processes finish iterating, we pool the winning dictionaries\\ntogether, select the best performing seed from the last iteration as the new current strategy, and repeat. After 4\\nminutes, we enact the same final step of testing as in V1 where the top 100 seedings from all iterations are put against\\neach other and the set of seeds with the highest average win percentage is submitted.\"), \"\\n\", React.createElement(\"div\", {\n    className: \"flex justify-center\"\n  }, React.createElement(\"div\", {\n    className: \"p-4 w-full sm:w-fit\"\n  }, React.createElement(Prism, {\n    language: \"python\"\n  }, codeV2))), \"\\n\", React.createElement(\"br\"), \"\\n\", React.createElement(\"p\", {\n    className: \"font-bold text-lg sm:text-3xl\"\n  }, \" Results \"), \"\\n\", React.createElement(_components.p, null, \"Out of about 32 teams, we came in second place. As it turns out, the first-place team used pretty much the same strategy\\nwe did, but with no final step. What this effectively accomplishes is that they found a pseudo-Nash equilibrium, a\\nstrategy that was excellent at beating other \\\"good\\\" strategies but not necessarily average strategies. This makes a lot\\nof sense in the context of previous rounds, where we mad a much better record against teams that employed surface-level\\nstrategies like degree or betweenness centrality because we prioritized \", React.createElement(_components.em, null, \"average\"), \" win rate instead of just wins against\\ngood strategies.\"), \"\\n\", React.createElement(\"br\"), \"\\n\", React.createElement(_components.p, null, \"Overall, I'm extremely pleased with how we did. I'm incredibly surprised with how effective a heavily-optimized brute\\nforce approach worked, especially in a competition that has been a Caltech classic for many years. Perhaps this just\\ngoes to show that sometimes simpler is better!\"));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import GATSBY_COMPILED_MDX from \"/Users/michael/Desktop/mogonzal/mogonzal-website/projects/cs144_pandemaniac/cs144_pandemaniac.mdx\";\nimport * as React from 'react';\nimport {graphql} from 'gatsby';\nimport Layout from '../../components/layout';\nconst ProjectPost = ({data, children}) => {\n  return React.createElement(Layout, {\n    pageTitle: data.mdx.frontmatter.title,\n    date: data.mdx.frontmatter.date\n  }, React.createElement(\"div\", {\n    className: \"w-full sm:w-2/3\"\n  }, children));\n};\nexport const query = graphql`\n  query ($id: String) {\n    mdx(id: { eq: $id }) {\n      frontmatter {\n        title\n        date(formatString: \"MMMM D, YYYY\")\n        thumbnail {\n          childImageSharp {\n            gatsbyImageData\n          }\n        }\n        thumbnail_alt\n      }\n    }\n  }`;\nexport const Head = ({data}) => React.createElement(\"title\", null, data.mdx.frontmatter.title);\nProjectPost\nexport default function GatsbyMDXWrapper(props) {\n  return React.createElement(ProjectPost, props, React.createElement(GATSBY_COMPILED_MDX, props));\n}\n","import * as React from 'react'\nimport { InlineMath, BlockMath } from 'react-katex';\n\nconst Latex = ({ displayMode, formula }) => {\n  if (displayMode === 'block') {\n    return <BlockMath>{formula}</BlockMath>;\n  } else {\n    return <InlineMath>{formula}</InlineMath>;\n  }\n};\n\nexport default Latex;","(function(global, factory) {\n    if (typeof module === \"object\" && typeof module.exports === \"object\") factory(exports, require(\"react\"), require(\"prop-types\"), require(\"katex\"));\n    else if (typeof define === \"function\" && define.amd) define([\n        \"exports\",\n        \"react\",\n        \"prop-types\",\n        \"katex\"\n    ], factory);\n    else if (global = typeof globalThis !== \"undefined\" ? globalThis : global || self) factory(global.index = {}, global.react, global.propTypes, global.katex);\n})(this, function(exports, _react, _propTypes, _katex) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", {\n        value: true\n    });\n    function _export(target, all) {\n        for(var name in all)Object.defineProperty(target, name, {\n            enumerable: true,\n            get: all[name]\n        });\n    }\n    _export(exports, {\n        BlockMath: ()=>BlockMath,\n        InlineMath: ()=>InlineMath\n    });\n    _react = /*#__PURE__*/ _interopRequireWildcard(_react);\n    _propTypes = /*#__PURE__*/ _interopRequireDefault(_propTypes);\n    _katex = /*#__PURE__*/ _interopRequireDefault(_katex);\n    function _interopRequireDefault(obj) {\n        return obj && obj.__esModule ? obj : {\n            default: obj\n        };\n    }\n    function _getRequireWildcardCache(nodeInterop) {\n        if (typeof WeakMap !== \"function\") return null;\n        var cacheBabelInterop = new WeakMap();\n        var cacheNodeInterop = new WeakMap();\n        return (_getRequireWildcardCache = function(nodeInterop) {\n            return nodeInterop ? cacheNodeInterop : cacheBabelInterop;\n        })(nodeInterop);\n    }\n    function _interopRequireWildcard(obj, nodeInterop) {\n        if (!nodeInterop && obj && obj.__esModule) {\n            return obj;\n        }\n        if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") {\n            return {\n                default: obj\n            };\n        }\n        var cache = _getRequireWildcardCache(nodeInterop);\n        if (cache && cache.has(obj)) {\n            return cache.get(obj);\n        }\n        var newObj = {};\n        var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n        for(var key in obj){\n            if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) {\n                var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n                if (desc && (desc.get || desc.set)) {\n                    Object.defineProperty(newObj, key, desc);\n                } else {\n                    newObj[key] = obj[key];\n                }\n            }\n        }\n        newObj.default = obj;\n        if (cache) {\n            cache.set(obj, newObj);\n        }\n        return newObj;\n    }\n    /**\n * @typedef {import(\"react\").ReactNode} ReactNode\n *\n *\n * @callback ErrorRenderer\n * @param {Error} error\n * @returns {ReactNode}\n *\n *\n * @typedef {object} MathComponentPropsWithMath\n * @property {string} math\n * @property {ReactNode=} children\n * @property {string=} errorColor\n * @property {ErrorRenderer=} renderError\n *\n *\n * @typedef {object} MathComponentPropsWithChildren\n * @property {string=} math\n * @property {ReactNode} children\n * @property {string=} errorColor\n * @property {ErrorRenderer=} renderError\n *\n * @typedef {MathComponentPropsWithMath | MathComponentPropsWithChildren} MathComponentProps\n */ const createMathComponent = (Component, { displayMode  })=>{\n        /**\n   *\n   * @param {MathComponentProps} props\n   * @returns {ReactNode}\n   */ const MathComponent = ({ children , errorColor , math , renderError  })=>{\n            const formula = math !== null && math !== void 0 ? math : children;\n            const { html , error  } = (0, _react.useMemo)(()=>{\n                try {\n                    const html = _katex.default.renderToString(formula, {\n                        displayMode,\n                        errorColor,\n                        throwOnError: !!renderError\n                    });\n                    return {\n                        html,\n                        error: undefined\n                    };\n                } catch (error) {\n                    if (error instanceof _katex.default.ParseError || error instanceof TypeError) {\n                        return {\n                            error\n                        };\n                    }\n                    throw error;\n                }\n            }, [\n                formula,\n                errorColor,\n                renderError\n            ]);\n            if (error) {\n                return renderError ? renderError(error) : /*#__PURE__*/ _react.default.createElement(Component, {\n                    html: `${error.message}`\n                });\n            }\n            return /*#__PURE__*/ _react.default.createElement(Component, {\n                html: html\n            });\n        };\n        MathComponent.propTypes = {\n            children: _propTypes.default.string,\n            errorColor: _propTypes.default.string,\n            math: _propTypes.default.string,\n            renderError: _propTypes.default.func\n        };\n        return MathComponent;\n    };\n    const InternalPathComponentPropTypes = {\n        html: _propTypes.default.string.isRequired\n    };\n    const InternalBlockMath = ({ html  })=>{\n        return /*#__PURE__*/ _react.default.createElement(\"div\", {\n            \"data-testid\": \"react-katex\",\n            dangerouslySetInnerHTML: {\n                __html: html\n            }\n        });\n    };\n    InternalBlockMath.propTypes = InternalPathComponentPropTypes;\n    const InternalInlineMath = ({ html  })=>{\n        return /*#__PURE__*/ _react.default.createElement(\"span\", {\n            \"data-testid\": \"react-katex\",\n            dangerouslySetInnerHTML: {\n                __html: html\n            }\n        });\n    };\n    InternalInlineMath.propTypes = InternalPathComponentPropTypes;\n    const BlockMath = createMathComponent(InternalBlockMath, {\n        displayMode: true\n    });\n    const InlineMath = createMathComponent(InternalInlineMath, {\n        displayMode: false\n    });\n});\n\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9pbmRleC5qc3giXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0LCB7IHVzZU1lbW8gfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IEthVGVYIGZyb20gJ2thdGV4JztcblxuLyoqXG4gKiBAdHlwZWRlZiB7aW1wb3J0KFwicmVhY3RcIikuUmVhY3ROb2RlfSBSZWFjdE5vZGVcbiAqXG4gKlxuICogQGNhbGxiYWNrIEVycm9yUmVuZGVyZXJcbiAqIEBwYXJhbSB7RXJyb3J9IGVycm9yXG4gKiBAcmV0dXJucyB7UmVhY3ROb2RlfVxuICpcbiAqXG4gKiBAdHlwZWRlZiB7b2JqZWN0fSBNYXRoQ29tcG9uZW50UHJvcHNXaXRoTWF0aFxuICogQHByb3BlcnR5IHtzdHJpbmd9IG1hdGhcbiAqIEBwcm9wZXJ0eSB7UmVhY3ROb2RlPX0gY2hpbGRyZW5cbiAqIEBwcm9wZXJ0eSB7c3RyaW5nPX0gZXJyb3JDb2xvclxuICogQHByb3BlcnR5IHtFcnJvclJlbmRlcmVyPX0gcmVuZGVyRXJyb3JcbiAqXG4gKlxuICogQHR5cGVkZWYge29iamVjdH0gTWF0aENvbXBvbmVudFByb3BzV2l0aENoaWxkcmVuXG4gKiBAcHJvcGVydHkge3N0cmluZz19IG1hdGhcbiAqIEBwcm9wZXJ0eSB7UmVhY3ROb2RlfSBjaGlsZHJlblxuICogQHByb3BlcnR5IHtzdHJpbmc9fSBlcnJvckNvbG9yXG4gKiBAcHJvcGVydHkge0Vycm9yUmVuZGVyZXI9fSByZW5kZXJFcnJvclxuICpcbiAqIEB0eXBlZGVmIHtNYXRoQ29tcG9uZW50UHJvcHNXaXRoTWF0aCB8IE1hdGhDb21wb25lbnRQcm9wc1dpdGhDaGlsZHJlbn0gTWF0aENvbXBvbmVudFByb3BzXG4gKi9cblxuY29uc3QgY3JlYXRlTWF0aENvbXBvbmVudCA9IChDb21wb25lbnQsIHsgZGlzcGxheU1vZGUgfSkgPT4ge1xuICAvKipcbiAgICpcbiAgICogQHBhcmFtIHtNYXRoQ29tcG9uZW50UHJvcHN9IHByb3BzXG4gICAqIEByZXR1cm5zIHtSZWFjdE5vZGV9XG4gICAqL1xuICBjb25zdCBNYXRoQ29tcG9uZW50ID0gKHsgY2hpbGRyZW4sIGVycm9yQ29sb3IsIG1hdGgsIHJlbmRlckVycm9yIH0pID0+IHtcbiAgICBjb25zdCBmb3JtdWxhID0gbWF0aCA/PyBjaGlsZHJlbjtcblxuICAgIGNvbnN0IHsgaHRtbCwgZXJyb3IgfSA9IHVzZU1lbW8oKCkgPT4ge1xuICAgICAgdHJ5IHtcbiAgICAgICAgY29uc3QgaHRtbCA9IEthVGVYLnJlbmRlclRvU3RyaW5nKGZvcm11bGEsIHtcbiAgICAgICAgICBkaXNwbGF5TW9kZSxcbiAgICAgICAgICBlcnJvckNvbG9yLFxuICAgICAgICAgIHRocm93T25FcnJvcjogISFyZW5kZXJFcnJvcixcbiAgICAgICAgfSk7XG5cbiAgICAgICAgcmV0dXJuIHsgaHRtbCwgZXJyb3I6IHVuZGVmaW5lZCB9O1xuICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgaWYgKGVycm9yIGluc3RhbmNlb2YgS2FUZVguUGFyc2VFcnJvciB8fCBlcnJvciBpbnN0YW5jZW9mIFR5cGVFcnJvcikge1xuICAgICAgICAgIHJldHVybiB7IGVycm9yIH07XG4gICAgICAgIH1cblxuICAgICAgICB0aHJvdyBlcnJvcjtcbiAgICAgIH1cbiAgICB9LCBbZm9ybXVsYSwgZXJyb3JDb2xvciwgcmVuZGVyRXJyb3JdKTtcblxuICAgIGlmIChlcnJvcikge1xuICAgICAgcmV0dXJuIHJlbmRlckVycm9yID8gcmVuZGVyRXJyb3IoZXJyb3IpIDogPENvbXBvbmVudCBodG1sPXtgJHtlcnJvci5tZXNzYWdlfWB9IC8+O1xuICAgIH1cblxuICAgIHJldHVybiA8Q29tcG9uZW50IGh0bWw9e2h0bWx9IC8+O1xuICB9O1xuXG4gIE1hdGhDb21wb25lbnQucHJvcFR5cGVzID0ge1xuICAgIGNoaWxkcmVuOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAgIGVycm9yQ29sb3I6IFByb3BUeXBlcy5zdHJpbmcsXG4gICAgbWF0aDogUHJvcFR5cGVzLnN0cmluZyxcbiAgICByZW5kZXJFcnJvcjogUHJvcFR5cGVzLmZ1bmMsXG4gIH07XG5cbiAgcmV0dXJuIE1hdGhDb21wb25lbnQ7XG59O1xuXG5jb25zdCBJbnRlcm5hbFBhdGhDb21wb25lbnRQcm9wVHlwZXMgPSB7XG4gIGh0bWw6IFByb3BUeXBlcy5zdHJpbmcuaXNSZXF1aXJlZCxcbn07XG5cbmNvbnN0IEludGVybmFsQmxvY2tNYXRoID0gKHsgaHRtbCB9KSA9PiB7XG4gIHJldHVybiA8ZGl2IGRhdGEtdGVzdGlkPVwicmVhY3Qta2F0ZXhcIiBkYW5nZXJvdXNseVNldElubmVySFRNTD17eyBfX2h0bWw6IGh0bWwgfX0gLz47XG59O1xuXG5JbnRlcm5hbEJsb2NrTWF0aC5wcm9wVHlwZXMgPSBJbnRlcm5hbFBhdGhDb21wb25lbnRQcm9wVHlwZXM7XG5cbmNvbnN0IEludGVybmFsSW5saW5lTWF0aCA9ICh7IGh0bWwgfSkgPT4ge1xuICByZXR1cm4gPHNwYW4gZGF0YS10ZXN0aWQ9XCJyZWFjdC1rYXRleFwiIGRhbmdlcm91c2x5U2V0SW5uZXJIVE1MPXt7IF9faHRtbDogaHRtbCB9fSAvPjtcbn07XG5cbkludGVybmFsSW5saW5lTWF0aC5wcm9wVHlwZXMgPSBJbnRlcm5hbFBhdGhDb21wb25lbnRQcm9wVHlwZXM7XG5cbmV4cG9ydCBjb25zdCBCbG9ja01hdGggPSBjcmVhdGVNYXRoQ29tcG9uZW50KEludGVybmFsQmxvY2tNYXRoLCB7IGRpc3BsYXlNb2RlOiB0cnVlIH0pO1xuZXhwb3J0IGNvbnN0IElubGluZU1hdGggPSBjcmVhdGVNYXRoQ29tcG9uZW50KEludGVybmFsSW5saW5lTWF0aCwgeyBkaXNwbGF5TW9kZTogZmFsc2UgfSk7XG4iXSwibmFtZXMiOlsiQmxvY2tNYXRoIiwiSW5saW5lTWF0aCIsImNyZWF0ZU1hdGhDb21wb25lbnQiLCJDb21wb25lbnQiLCJkaXNwbGF5TW9kZSIsIk1hdGhDb21wb25lbnQiLCJjaGlsZHJlbiIsImVycm9yQ29sb3IiLCJtYXRoIiwicmVuZGVyRXJyb3IiLCJmb3JtdWxhIiwiaHRtbCIsImVycm9yIiwidXNlTWVtbyIsIkthVGVYIiwicmVuZGVyVG9TdHJpbmciLCJ0aHJvd09uRXJyb3IiLCJ1bmRlZmluZWQiLCJQYXJzZUVycm9yIiwiVHlwZUVycm9yIiwibWVzc2FnZSIsInByb3BUeXBlcyIsIlByb3BUeXBlcyIsInN0cmluZyIsImZ1bmMiLCJJbnRlcm5hbFBhdGhDb21wb25lbnRQcm9wVHlwZXMiLCJpc1JlcXVpcmVkIiwiSW50ZXJuYWxCbG9ja01hdGgiLCJkaXYiLCJkYXRhLXRlc3RpZCIsImRhbmdlcm91c2x5U2V0SW5uZXJIVE1MIiwiX19odG1sIiwiSW50ZXJuYWxJbmxpbmVNYXRoIiwic3BhbiJdLCJtYXBwaW5ncyI6IkFBQUE7bUdBQStCLE9BQU8sV0FDaEIsWUFBWSxXQUNoQixPQUFPOzs7UUFGTSxPQUFPO1FBQ2hCLFlBQVk7UUFDaEIsT0FBTzs7Ozs7Ozs7Ozs7Ozs7O1FBdUZaQSxTQUFTLE1BQVRBLFNBQVM7UUFDVEMsVUFBVSxNQUFWQSxVQUFVOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0lBdEZ2Qjs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Q0F1QkMsR0FFRCxNQUFNQyxtQkFBbUIsR0FBRyxDQUFDQyxTQUFTLEVBQUUsRUFBRUMsV0FBVyxDQUFBLEVBQUUsR0FBSztRQUMxRDs7OztHQUlDLEdBQ0QsTUFBTUMsYUFBYSxHQUFHLENBQUMsRUFBRUMsUUFBUSxDQUFBLEVBQUVDLFVBQVUsQ0FBQSxFQUFFQyxJQUFJLENBQUEsRUFBRUMsV0FBVyxDQUFBLEVBQUUsR0FBSztZQUNyRSxNQUFNQyxPQUFPLEdBQUdGLElBQUksYUFBSkEsSUFBSSxjQUFKQSxJQUFJLEdBQUlGLFFBQVEsQUFBQztZQUVqQyxNQUFNLEVBQUVLLElBQUksQ0FBQSxFQUFFQyxLQUFLLENBQUEsRUFBRSxHQUFHQyxJ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\n\n//# sourceMappingURL=react-katex.js.map"],"names":["_createMdxContent","props","_components","Object","assign","p","strong","em","_provideComponents","components","React","className","Latex","displayMode","formula","Prism","language","wrapper","MDXLayout","ProjectPost","_ref","data","children","Layout","pageTitle","mdx","frontmatter","title","date","Head","_ref2","GatsbyMDXWrapper","GATSBY_COMPILED_MDX","BlockMath","InlineMath","exports","_react","_propTypes","_katex","_interopRequireDefault","obj","__esModule","default","_getRequireWildcardCache","nodeInterop","WeakMap","cacheBabelInterop","cacheNodeInterop","_interopRequireWildcard","cache","has","get","newObj","hasPropertyDescriptor","defineProperty","getOwnPropertyDescriptor","key","prototype","hasOwnProperty","call","desc","set","value","target","all","name","enumerable","_export","createMathComponent","Component","MathComponent","errorColor","math","renderError","html","error","useMemo","renderToString","throwOnError","undefined","ParseError","TypeError","createElement","message","propTypes","string","func","InternalPathComponentPropTypes","isRequired","InternalBlockMath","dangerouslySetInnerHTML","__html","InternalInlineMath","module","factory"],"sourceRoot":""}