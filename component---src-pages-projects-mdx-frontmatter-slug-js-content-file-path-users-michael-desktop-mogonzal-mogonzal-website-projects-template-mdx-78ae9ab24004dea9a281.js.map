{"version":3,"file":"component---src-pages-projects-mdx-frontmatter-slug-js-content-file-path-users-michael-desktop-mogonzal-mogonzal-website-projects-template-mdx-78ae9ab24004dea9a281.js","mappings":"wNAGA,SAASA,EAAkBC,GACzB,MAAMC,EAAcC,OAAOC,OAAO,CAChCC,EAAG,IACHC,GAAI,KACJC,OAAQ,SACRC,GAAI,KACJC,GAAI,OACHC,EAAAA,EAAAA,MAAsBT,EAAMU,YAC/B,OAAOC,EAAAA,cAAoBA,EAAAA,SAAgB,KAAMA,EAAAA,cAAoBV,EAAYG,EAAG,KAAM,wCAAyCO,EAAAA,cAAoBV,EAAYI,GAAI,KAAM,WAAY,KAAM,KAAMM,EAAAA,cAAoBV,EAAYG,EAAG,KAAM,cAAeO,EAAAA,cAAoBV,EAAYK,OAAQ,KAAM,YAAa,gBAAiB,KAAMK,EAAAA,cAAoBV,EAAYM,GAAI,KAAM,KAAMI,EAAAA,cAAoBV,EAAYO,GAAI,KAAM,gBAAiB,KAAMG,EAAAA,cAAoBV,EAAYO,GAAI,KAAM,WAAY,KAAMG,EAAAA,cAAoBV,EAAYO,GAAI,KAAM,mBAAoB,MAAO,KAAMG,EAAAA,cAAoBV,EAAYG,EAAG,KAAM,iDAClnB,CAKA,MAJA,SAAoBJ,QAAK,IAALA,IAAAA,EAAQ,CAAC,GAC3B,MAAOY,QAASC,GAAaX,OAAOC,OAAO,CAAC,GAAGM,EAAAA,EAAAA,MAAsBT,EAAMU,YAC3E,OAAOG,EAAYF,EAAAA,cAAoBE,EAAWb,EAAOW,EAAAA,cAAoBZ,EAAmBC,IAAUD,EAAkBC,EAC9H,E,oBCXA,MAAMc,EAAcC,IAAsB,IAArB,KAACC,EAAI,SAAEC,GAAS,EACnC,MAAMC,GAAQC,EAAAA,EAAAA,GAASH,EAAKI,IAAIC,YAAYC,WAC5C,OAAOX,EAAAA,cAAoBY,EAAAA,EAAQ,CACjCC,UAAWR,EAAKI,IAAIC,YAAYI,OAC/Bd,EAAAA,cAAoB,IAAK,KAAM,WAAYK,EAAKI,IAAIC,YAAYK,MAAOf,EAAAA,cAAoBgB,EAAAA,EAAa,CACzGT,MAAOA,EACPU,IAAKZ,EAAKI,IAAIC,YAAYQ,gBACxBZ,EAAS,EAiBFa,EAAOC,IAAA,IAAC,KAACf,GAAK,SAAKL,EAAAA,cAAoB,QAAS,KAAMK,EAAKI,IAAIC,YAAYI,MAAM,EAE/E,SAASO,EAAiBhC,GACvC,OAAOW,EAAAA,cAAoBG,EAAad,EAAOW,EAAAA,cAAoBsB,EAAqBjC,GAC1F,C,sECDO,MAAMkC,EAAa,gBAAoB,CAAC,GAiCxC,SAASC,EAAiBzB,GAC/B,MAAM0B,EAAoB,aAAiBF,GAE3C,OAAO,WAAc,IAEO,mBAAfxB,EACFA,EAAW0B,GAGb,IAAIA,KAAsB1B,IAChC,CAAC0B,EAAmB1B,GACzB,C","sources":["webpack://mogonzal-website/./projects/template.mdx","webpack://mogonzal-website/./src/pages/projects/{mdx.frontmatter__slug}.js","webpack://mogonzal-website/./node_modules/@mdx-js/react/lib/index.js"],"sourcesContent":["/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    em: \"em\",\n    strong: \"strong\",\n    ul: \"ul\",\n    li: \"li\"\n  }, _provideComponents(), props.components);\n  return React.createElement(React.Fragment, null, React.createElement(_components.p, null, \"This is my first blog post! Isn't it \", React.createElement(_components.em, null, \"awesome\"), \"?\"), \"\\n\", React.createElement(_components.p, null, \"Some of my \", React.createElement(_components.strong, null, \"favorite\"), \" things are:\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"Petting dogs\"), \"\\n\", React.createElement(_components.li, null, \"Singing\"), \"\\n\", React.createElement(_components.li, null, \"Eating potatoes\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"More content\\nMore content\\nEven more content\"));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import GATSBY_COMPILED_MDX from \"/Users/michael/Desktop/mogonzal/mogonzal-website/projects/template.mdx\";\nimport * as React from 'react';\nimport {graphql} from 'gatsby';\nimport {GatsbyImage, getImage} from 'gatsby-plugin-image';\nimport Layout from '../../components/layout';\nconst ProjectPost = ({data, children}) => {\n  const image = getImage(data.mdx.frontmatter.thumbnail);\n  return React.createElement(Layout, {\n    pageTitle: data.mdx.frontmatter.title\n  }, React.createElement(\"p\", null, \"Posted: \", data.mdx.frontmatter.date), React.createElement(GatsbyImage, {\n    image: image,\n    alt: data.mdx.frontmatter.thumbnail_alt\n  }), children);\n};\nexport const query = graphql`\n  query ($id: String) {\n    mdx(id: { eq: $id }) {\n      frontmatter {\n        title\n        date(formatString: \"MMMM D, YYYY\")\n        thumbnail {\n          childImageSharp {\n            gatsbyImageData\n          }\n        }\n        thumbnail_alt\n      }\n    }\n  }`;\nexport const Head = ({data}) => React.createElement(\"title\", null, data.mdx.frontmatter.title);\nProjectPost\nexport default function GatsbyMDXWrapper(props) {\n  return React.createElement(ProjectPost, props, React.createElement(GATSBY_COMPILED_MDX, props));\n}\n","/**\n * @typedef {import('react').ReactNode} ReactNode\n * @typedef {import('mdx/types').MDXComponents} Components\n *\n * @typedef Props\n *   Configuration.\n * @property {Components} [components]\n *   Mapping of names for JSX components to React components.\n * @property {boolean} [disableParentContext=false]\n *   Turn off outer component context.\n * @property {ReactNode} [children]\n *   Children.\n *\n * @callback MergeComponents\n * @param {Components} currentComponents\n *   Current components from the context.\n * @returns {Components}\n *   Merged components.\n */\n\nimport React from 'react'\n\n/**\n * @type {import('react').Context<Components>}\n * @deprecated\n *   This export is marked as a legacy feature.\n *   That means it’s no longer recommended for use as it might be removed\n *   in a future major release.\n *\n *   Please use `useMDXComponents` to get context based components and\n *   `MDXProvider` to set context based components instead.\n */\nexport const MDXContext = React.createContext({})\n\n/**\n * @param {import('react').ComponentType<any>} Component\n * @deprecated\n *   This export is marked as a legacy feature.\n *   That means it’s no longer recommended for use as it might be removed\n *   in a future major release.\n *\n *   Please use `useMDXComponents` to get context based components instead.\n */\nexport function withMDXComponents(Component) {\n  return boundMDXComponent\n\n  /**\n   * @param {Record<string, unknown> & {components?: Components}} props\n   * @returns {JSX.Element}\n   */\n  function boundMDXComponent(props) {\n    const allComponents = useMDXComponents(props.components)\n    return React.createElement(Component, {...props, allComponents})\n  }\n}\n\n/**\n * Get current components from the MDX Context.\n *\n * @param {Components|MergeComponents} [components]\n *   Additional components to use or a function that takes the current\n *   components and filters/merges/changes them.\n * @returns {Components}\n *   Current components.\n */\nexport function useMDXComponents(components) {\n  const contextComponents = React.useContext(MDXContext)\n  // Memoize to avoid unnecessary top-level context changes\n  return React.useMemo(() => {\n    // Custom merge via a function prop\n    if (typeof components === 'function') {\n      return components(contextComponents)\n    }\n\n    return {...contextComponents, ...components}\n  }, [contextComponents, components])\n}\n\n/** @type {Components} */\nconst emptyObject = {}\n\n/**\n * Provider for MDX context\n *\n * @param {Props} props\n * @returns {JSX.Element}\n */\nexport function MDXProvider({components, children, disableParentContext}) {\n  let allComponents = useMDXComponents(components)\n\n  if (disableParentContext) {\n    allComponents = components || emptyObject\n  }\n\n  return React.createElement(\n    MDXContext.Provider,\n    {value: allComponents},\n    children\n  )\n}\n"],"names":["_createMdxContent","props","_components","Object","assign","p","em","strong","ul","li","_provideComponents","components","React","wrapper","MDXLayout","ProjectPost","_ref","data","children","image","getImage","mdx","frontmatter","thumbnail","Layout","pageTitle","title","date","GatsbyImage","alt","thumbnail_alt","Head","_ref2","GatsbyMDXWrapper","GATSBY_COMPILED_MDX","MDXContext","useMDXComponents","contextComponents"],"sourceRoot":""}